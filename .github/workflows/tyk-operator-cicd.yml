# Very basic workflow that will be triggered on any push activities done to the "master/main" branch.
# Name of the workflow -- describing the workflow
name: deploy-crds-tyk-operator

# Event/events -- an event used to trigger this workflow. Everytime someone pushed to master branch, this workflow
# will get triggered/
on:
  push:
    branches: [ main ]
    
env: 
  AWS_REGION: us-east-2

# Jobs that are executed based on the events above.
jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       # Step 1: Predefined action used to checkout the repository/code. 
#       # Predefined/precreated actions are hosted. 
#       -
#         name: Checkout 
#         uses: actions/checkout@v3
#       # Step 2: Connect to my EKS cluster where tyk-operator is deployed and apply the CRDs stored in my source
#       # of truth (GitHub)
#       -
#         name: Deployment
#         uses: Pablommr/kubernetes-eks@v1.2.0
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           KUBECONFIG: ${{ secrets.KUBECONFIG }}
#           KUBE_YAML: crds/
#       -
#         name: Checkfiles
#         run: ls -l
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Predefined action used to checkout the repository/code. 
      # Predefined/precreated actions are hosted. 
      - name: Checkout  
        uses: actions/checkout@v3
        
      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # Step 3: Install kubectl
      - name: Install and configure kubectl
        run: |
          VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          # https://github.com/aws/aws-cli/issues/6920#issuecomment-1117981158
          VERSION=v1.23.6
          curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
            --progress-bar \
            --location \
            --remote-name
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml
          ls -l ./crds
          kubectl version --client --output=yaml
          
      # Step 4: Install JQ
      - name: Install JQ
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'echo "version ${{ steps.version.outputs.value }}"'

      # Step 5: Install YQ
      - name: Install YQ
        run: |
          sudo add-apt-repository ppa:rmescandon/yq \
          && apt update \
          && apt install yq -y
      
      # Step 5: Connect to Tyk Opeartor hosted on EKS Cluster
      - name: Connect to Tyk Operator
        run: |
          aws --version
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ secrets.AWS_CLUSTER }}
          kubectl get svc
          
      # Step 6: Retrieve deployed tykapis and tykpolicies
      - name: Retrieve current deployed CRDs for APIs and Policies
        run: |
          echo "Current deployed APIs and Policies"
          kubectl get tykapis
          kubectl get tykpolicies
          
     # Step 7: Deploy CRDs - tykapis and tykpolicies
      - name: Deploy CRDs
        run: |
          echo "Updated deployed APIs and Policies"
          kubectl apply -f crds/
          kubectl get tykapis
          kubectl get tykpolicies
          
      # Step 8: Clean CRDs - tykapis and tyk poloicies
      - name: Cleanup CRDs
        run: |
          chmod +x ./clean-up.sh
          ./clean-up.sh
